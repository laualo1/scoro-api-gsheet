function fetchScoroData() {
  var companyName = 'peripherydigital';
  var apiKey = 'ScoroAPI_2d9e9c9f36a0a48'; // Replace with your actual API key

  // Set the start date as 1st September 2024
  var fromDate = '2024-09-26';
  var today = new Date();
  var toDate = Utilities.formatDate(today, 'UTC', "yyyy-MM-dd");

  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Aggregate');
  if (!sheet) {
    sheet = SpreadsheetApp.getActiveSpreadsheet().insertSheet('Aggregate');
  }

  // Clear the existing data (except headers)
  if (sheet.getLastRow() > 1) {
    sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).clear();
  }

  // Define headers (ensure this only runs once, not on every fetch)
  if (sheet.getLastRow() === 0) {
    var headers = [
      'id', 'doc_no', 'doc_date', 'supplier', 'supplier_id', 'project_name', 'quote_no', 'total_sum',
      'Media Plan', 'Consolidated Client', 'Retainer / Not', 'source', // Added source indicator
      'line_id', 'product_id', 'product_name', 'line_sum', 'price', 'amount', 'discount', 'vat', 'comment'
    ];
    sheet.appendRow(headers);
  }

  // Fetch and update invoices
  fetchAndProcessScoroData(sheet, 'invoice', companyName, apiKey, fromDate, toDate);

  // Fetch and update purchase orders
  fetchAndProcessScoroData(sheet, 'purchaseOrder', companyName, apiKey, fromDate, toDate);
}

function fetchAndProcessScoroData(sheet, source, companyName, apiKey, fromDate, toDate) {
  var page = 1;
  var perPage = 50;
  var moreData = true;

  while (moreData) {
    moreData = fetchScoroDataFromUrl(sheet, source, companyName, apiKey, fromDate, toDate, page, perPage);
    page++;
  }
}

function fetchScoroDataFromUrl(sheet, source, companyName, apiKey, fromDate, toDate, page, perPage) {
  var url;
  if (source === 'invoice') {
    url = 'https://' + companyName + '.scoro.com/api/v2/invoices/list';
  } else if (source === 'purchaseOrder') {
    url = 'https://' + companyName + '.scoro.com/api/v2/purchaseOrders/list';
  } else {
    throw new Error('Invalid source type: ' + source);
  }

  var requestPayload = {
    "apiKey": apiKey,
    "lang": "eng",
    "company_account_id": companyName,
    "filter": {
      "created_date": {
        "from_date": fromDate,
        "to_date": toDate
      }
    },
    "per_page": perPage,
    "page": page,
    "detailed_response": true
  };

  var options = {
    'method': 'post',
    'contentType': 'application/json',
    'payload': JSON.stringify(requestPayload)
  };

  try {
    var response = UrlFetchApp.fetch(url, options);
    var data = JSON.parse(response.getContentText());

    if (data && data.data && data.data.length > 0) {
      var items = data.data;

      items.forEach(function(item) {
        var baseRow = [
          item.id, item.no, item.date,
          '', '', // Placeholder for supplier_name and supplier_id
          item.project_name,
          source === 'invoice' ? extractQuoteNumber(item.quote_id) : item.quote_id,
          item.sum,
          extractCustomField(item.custom_fields, 'c_mediaplan'),
          extractCustomField(item.custom_fields, 'c_consolidatedclient'),
          extractCustomField(item.custom_fields, 'c_retainernot'),
          source
        ];

        if (source === 'invoice' && item.lines) {
          // For invoices, extract supplier from each line item
          parseLinesForSupplier(item.lines, baseRow, sheet);
        } else if (source === 'purchaseOrder') {
          // For purchase orders, extract supplier at the document level
          baseRow[3] = item.company_name;
          baseRow[4] = item.company_id;

          if (item.lines) {
            parseLinesColumn(item.lines, baseRow, sheet);
          } else {
            sheet.appendRow(baseRow.concat(['']));
          }
        }
      });

      return true; // More data to fetch
    } else {
      Logger.log('No data found for ' + url);
      return false; // No more data
    }
  } catch (e) {
    Logger.log('Error fetching data from ' + url + ': ' + e.toString());
    return false; // Stop fetching on error
  }
}

function parseLinesForSupplier(linesData, baseRow, sheet) {
  try {
    var parsedData = Array.isArray(linesData) ? linesData : JSON.parse(linesData);

    parsedData.forEach(function(lineItem) {
      var lineRow = baseRow.slice(); // Clone the base row
      lineRow[3] = lineItem.supplier_name || ''; // Insert supplier name into the existing supplier column
      lineRow[4] = lineItem.supplier_id || '';   // Insert supplier ID into the existing supplier_id column

      // Continue processing the line items
      parseLinesColumn([lineItem], lineRow, sheet);
    });

  } catch (e) {
    Logger.log('Error parsing lines for supplier: ' + e.toString());
  }
}

function parseLinesColumn(linesData, baseRow, sheet) {
  try {
    var parsedData = Array.isArray(linesData) ? linesData : JSON.parse(linesData);

    parsedData.forEach(function(item) {
      var row = [
        item.id, item.product_id, item.product_name, item.sum, item.price, item.amount, item.discount, item.vat, item.comment
      ];

      var finalRow = baseRow.concat(row);
      sheet.appendRow(finalRow);
    });

  } catch (e) {
    Logger.log('Error parsing lines column: ' + e.toString());
  }
}

function extractCustomField(customFields, fieldId) {
  if (!customFields) return null;
  for (var i = 0; i < customFields.length; i++) {
    if (customFields[i].id === fieldId) {
      return customFields[i].value;
    }
  }
  return null;
}

function extractQuoteNumber(quoteId) {
  // Ensure quoteId is an array and has at least one element
  if (quoteId && Array.isArray(quoteId) && quoteId.length > 0) {
    const firstElement = quoteId[0]; // Get the first element
    if (typeof firstElement === 'string') {
      const match = firstElement.match(/\[(\d+)\]/); // Match the number inside brackets
      if (match && match[1]) {
        return match[1]; // Return the numeric value
      }
    } else if (typeof firstElement === 'number') {
      return firstElement.toString(); // Return the number directly if it's not inside a string
    }
  }
  return null; // Return null if no valid quote number found
}
